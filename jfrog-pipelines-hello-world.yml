template: true   # required for local templates
valuesFilePath: ./values.yml

resources:
  - name: myFirstRepo
    type: GitRepo
    configuration:
      # SCM integration where the repository is located
      gitProvider: {{ .Values.myRepo.gitProvider }} # this will be replaced from values.yml
      # Repository path, including org name/repo name
      path: {{ .Values.myRepo.path }} # this will be replaced from values.yml
      branches:
        # Specifies which branches will trigger dependent steps
        include: master

  - name: myFirstRepo2
    type: GitRepo
    configuration:
      # SCM integration where the repository is located
      gitProvider: {{ .Values.myRepo.gitProvider }} # this will be replaced from values.yml
      # Repository path, including org name/repo name
      path: {{ .Values.myRepo.path }} # this will be replaced from values.yml
      branches:
        # Specifies which branches will trigger dependent steps
        include: master1

  - name: myPropertyBag
    type: PropertyBag
    configuration:
      commitSha: 1
      runID: 1

pipelines:
  - name: my_first_pipeline
    configuration:
      environmentVariables:
        readOnly:
          UTP_DEPLOYMENT_INCOMING_WEBHOOK_NAME:
            default: 1
          SKIP_HELM_BUILD: 'YES'
    steps:
      - name: p1_s1
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when there are commit events to myFirstRepo
            - name: myFirstRepo
            - name: myFirstRepo2
        execution:
          onStart:
            - add_run_variables commitSha12=$res_myFirstRepo_commitSha
            - add_run_variables commitSha13=$res_myFirstRepo_commitSha
            - |
              if [[ "${SKIP_HELM_BUILD}" == "YES" ]]; then
                echo "Helm chart build is disabled. Skipping"
              fi
          onExecute:
            - |
              if [[ "${SKIP_HELM_BUILD}" == "YES" ]]; then
                echo "Helm chart build is disabled. Skipping"
              fi
            # Data from input resources is available as env variables in the step
            - echo $res_myFirstRepo_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_myFirstRepo_commitSha
            - add_run_variables commitSha2=$res_myFirstRepo_commitSha
            - add_run_variables commitSha3=$res_myFirstRepo_commitSha
            - add_run_variables commitSha4=$res_myFirstRepo_commitSha
            - add_run_variables commitSha5=$res_myFirstRepo_commitSha
            - add_run_variables commitSha99=$res_myFirstRepo_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"

      - name: p1_s2
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when there are commit events to myFirstRepo
            - name: myFirstRepo
          inputSteps:
            - name: p1_s1
        execution:
          onExecute:
            - - add_run_variables commitSha100=$res_myFirstRepo_commitSha
              - add_run_variables commitSha101=$res_myFirstRepo_commitSha
            # Demonstrates the availability of an env variable written to run state during p1_s1
            - echo $current_runid

      - name: p1_s3
        type: Bash
        configuration:
          inputSteps:
            - name: p1_s2
          outputResources:
            - name: myPropertyBag
        execution:
          onExecute:
            - echo $current_runid
            # Writes current run number to pipeline state
            - add_pipeline_variables prev_runid=$run_id
            # Uses an utility function to update the output resource with the commitSha that triggered this run
            # Dependent pipelines can be configured to trigger when this resource is updated
            # Utility functions documentation: https://www.jfrog.com/confluence/display/JFROG/Pipelines+Utility+Functions
            - write_output myPropertyBag commitSha=$commitSha runID=$current_runid

  - name: my_second_pipeline
    steps:
      - name: p2_s1
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when myPropertyBag is updated
            - name: myPropertyBag
        execution:
          onExecute:
            - sleep 30m
            # Retrieves the commitSha from input resource
            - echo "CommitSha is $res_myPropertyBag_commitSha"
